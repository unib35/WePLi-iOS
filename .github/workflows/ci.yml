name: WePLi CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      lint: ${{ steps.filter.outputs.lint }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'Projects/**'
              - 'Tuist/**'
              - 'Configs/**'
              - 'scripts/**'
              - '**/Package.resolved'
              - '**/Tuist/Dependencies.lock'
              - '**/*.xcodeproj'
              - '**/*.xcworkspace'
            lint:
              - 'Projects/**/*.swift'
              - '.swiftlint.yml'
              - '.swiftformat'

  lint:
    name: "Lint (SwiftFormat & SwiftLint)"
    needs: changes
    runs-on: macos-14
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        if: ${{ needs.changes.outputs.lint == 'true' }}
        run: |
          brew update
          brew install swiftformat swiftlint

      - name: SwiftFormat (lint mode)
        if: ${{ needs.changes.outputs.lint == 'true' }}
        run: |
          echo "Running SwiftFormat in lint mode…"
          swiftformat --lint . --config .swiftformat

      - name: SwiftLint (strict)
        if: ${{ needs.changes.outputs.lint == 'true' }}
        run: |
          echo "Running SwiftLint…"
          swiftlint --strict --quiet --reporter github-actions-logging

      - name: No lint changes
        if: ${{ needs.changes.outputs.lint != 'true' }}
        run: echo "No files requiring a lint check were changed. Skipping."

  build-test:
    name: "Build & Unit Test"
    needs: [changes, lint]
    if: ${{ always() }}
    runs-on: macos-14
    timeout-minutes: 60
    steps:
      - name: Enforce Lint Success
        if: ${{ needs.lint.result != 'success' }}
        run: |
          echo "Lint job failed. Aborting build and test."
          exit 1

      - name: Checkout
        uses: actions/checkout@v4

      - name: No code changes
        if: ${{ needs.changes.outputs.code != 'true' }}
        run: echo "No code files were changed. Skipping build and test."

      - name: Select Xcode
        if: ${{ needs.changes.outputs.code == 'true' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Cache SPM
        if: ${{ needs.changes.outputs.code == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData/SourcePackages
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/Tuist/Dependencies.lock') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Cache Tuist Dependencies
        if: ${{ needs.changes.outputs.code == 'true' }}
        uses: actions/cache@v4
        with:
          path: Tuist/Dependencies
          key: ${{ runner.os }}-tuist-${{ hashFiles('**/Tuist/Dependencies.lock') }}
          restore-keys: |
            ${{ runner.os }}-tuist-

      - name: Setup mise (Tuist via mise)
        if: ${{ needs.changes.outputs.code == 'true' }}
        uses: jdx/mise-action@v2

      - name: Install tools via mise
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: |
          mise install
          tuist --version

      - name: Setup other tools
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: |
          brew update
          brew install swiftgen xcbeautify
          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
          swiftgen --version

      - name: Tuist Install (resolve deps)
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: tuist install

      - name: Tuist Generate
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: tuist generate --no-open

      - name: Pick & Boot Simulator
        if: ${{ needs.changes.outputs.code == 'true' }}
        id: sim
        run: |
          SIM_ID=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/{print $2; exit}')
          if [ -z "$SIM_ID" ]; then
            echo "No available iPhone simulator found"; exit 1
          fi
          echo "SIM_ID=$SIM_ID" >> $GITHUB_OUTPUT
          xcrun simctl boot "$SIM_ID" || true

      - name: Build & Test
        if: ${{ needs.changes.outputs.code == 'true' }}
        env:
          SIM_ID: ${{ steps.sim.outputs.SIM_ID }}
        run: |
          set -o pipefail
          xcodebuild \
            -workspace WePLi.xcworkspace \
            -scheme WePLi \
            -destination "id=$SIM_ID" \
            -enableCodeCoverage YES \
            clean test | tee xcodebuild.log | xcbeautify

      - name: Upload Xcode Build Log on Failure
        if: ${{ failure() && needs.changes.outputs.code == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: xcodebuild.log
          if-no-files-found: ignore